C251 COMPILER V5.57.0,  main                                                               21/02/23  22:34:53  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\SoftWare\KeilC251\C251\BIN\C251.EXE main.c XSMALL BROWSE DEBUG PRINT(.\Listings\main.lst) TABS(2
                    -) OBJECT(.\Objects\main.obj) 

stmt  level    source

    1          //    @布丁橘长 2023/02/16
    2          //    简易秒表程序，启动/暂停，清零功能
    3          //    使用定时器0-模式0-1T模式-预分频-定时10毫秒
    4          //    8位共阳极数码管模块-74HC595级联驱动：第1、2位显示分钟，第4、5位显示秒钟，第7、8位显示毫秒
    5          //    数码管模块引脚定义：DS(DIO):P6.6 SH(SCK):P6.5 ST(RCK):P6.4（先发位码，再发段码）
    6          //    开发板板载按键：KEY1-P3.3：启动/暂停，KEY2-P3.2：清零（只在暂停时清零）
    7          //    实验开发板：STC32G12K128-LQFP64 屠龙刀三.1 ，程序主频12MHz
    8          
    9          #include <STC32G.H>
   10          #include "config.h"       //配置头文件，包含主频定义，数据类型定义
   11          #include "seg595.h"       //8位595数码管模块（先发位码，再发段码）
   12          
   13          #define START 1           //秒表状态：启动1，暂停2，清零3
   14          #define STOP  2
   15          #define CLEAR 3
   16          
   17          sbit KEY1 = P3^3;         
   18          sbit KEY2 = P3^2;
   19          
   20          void Timer0_Init(void);   //定时器0初始化函数声明
   21          void clock();             //秒表函数声明
   22          void keyscan();           //按键扫描函数声明
   23          
   24          u8 min,sec,msec;                  //全局变量：分钟、秒钟、毫秒
   25          u8 timing;                        //秒表状态变量
   26          u8 key1press,key2press,key1nums;  //按键1、2按下标志，按键1按键次数
   27          
   28          void main()
   29          { 
   30   1        EAXFR = 1;      // 使能访问 XFR
   31   1        CKCON = 0x00;   // 设置外部数据总线速度为最快
   32   1        WTST = 0x00;    // 设置程序代码等待参数，等待时间为0个时钟，CPU执行程序速度最快
   33   1      
   34   1        P0M1 = 0x00;P0M0 = 0x00;    //设置P0口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   35   1        P1M1 = 0x00;P1M0 = 0x00;    //设置P1口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   36   1        P2M1 = 0x00;P2M0 = 0x00;    //设置P2口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   37   1        P3M1 = 0x00;P3M0 = 0x00;    //设置P3口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   38   1        P4M1 = 0x00;P4M0 = 0x00;    //设置P4口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   39   1        P5M1 = 0x00;P5M0 = 0x00;    //设置P5口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   40   1        P6M1 = 0x00;P6M0 = 0x00;    //设置P6口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   41   1        P7M1 = 0x00;P7M0 = 0x00;    //设置P7口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   42   1        
   43   1        Timer0_Init();    //定时器0初始化
   44   1        EA = 1;           //使能总中断  
   45   1        while(1)
   46   1        {
   47   2          SEG_Disp((u8)(min/10),1);     //分钟-十位，数码管左边第1位
   48   2          SEG_Disp((u8)(min%10),2);     //分钟-个位，数码管左边第2位
   49   2          SEG_Disp(23,3);               //分隔-横杆，数码管左边第3位
   50   2          SEG_Disp((u8)(sec/10),4);     //秒钟-十位，数码管左边第4位
   51   2          SEG_Disp((u8)(sec%10),5);     //秒钟-个位，数码管左边第5位
   52   2          SEG_Disp(23,6);               //分隔-横杆，数码管左边第6位
   53   2          SEG_Disp((u8)(msec/10),7);    //毫秒-百位，数码管左边第7位
   54   2          SEG_Disp((u8)(msec%10),8);    //毫秒-十位，数码管左边第8位
   55   2        }
   56   1      }
   57          void Timer0_Isr(void) interrupt 1
   58          {
C251 COMPILER V5.57.0,  main                                                               21/02/23  22:34:53  PAGE 2   

   59   1        clock();                        //秒表函数
   60   1        keyscan();                      //按键扫描函数
   61   1        if(timing == START) msec++;     //秒表启动状态
   62   1        else if(timing == CLEAR)        //如果清零标志位1，清零分钟、秒钟、毫秒、按键次数
   63   1        {
   64   2          min = 0;    
   65   2          sec = 0;
   66   2          msec = 0;
   67   2          key1nums = 0;
   68   2        }
   69   1        if(key1press > 0) key1press++;    //按键1，延时消抖，每次中断+1,延时时间在10-20毫秒之间
   70   1        if(key2press > 0) key2press++;    //按键2，延时消抖，每次中断+1,延时时间在10-20毫秒之间
   71   1      }
   72          
   73          void Timer0_Init(void)    //10毫秒@12.000MHz
   74          {
   75   1        TM0PS = 0x01;           //设置定时器时钟预分频 ( 注意:并非所有系列都有此寄存器,详情请查看数据手册 )
   76   1        AUXR |= 0x80;           //定时器时钟1T模式
   77   1        TMOD &= 0xF0;           //设置定时器模式
   78   1        TL0 = 0xA0;             //设置定时初始值
   79   1        TH0 = 0x15;             //设置定时初始值
   80   1        TF0 = 0;                //清除TF0标志
   81   1        TR0 = 1;                //定时器0开始计时
   82   1        ET0 = 1;                //使能定时器0中断
   83   1      }
   84          void clock()                      //秒表函数
   85          {
   86   1        if(msec > 99)                   //1000毫秒即1秒
   87   1        {
   88   2          msec = 0;                     //清零毫秒数
   89   2          if(sec++ >= 59)               //60秒即1分
   90   2          {
   91   3            sec = 0;                    //清零秒数
   92   3            if(min++ >= 99)             //计时最大99分59秒990毫秒，超出就清零
   93   3            {
   94   4              min = 0;  
   95   4              sec = 0;
   96   4              msec = 0; 
   97   4            }
   98   3          }
   99   2        }
  100   1      }
  101          void keyscan()
  102          {
  103   1      //------------------KEY1-------------------------//按键1：启动/暂停
  104   1        if(KEY1 == 0 && key1press == 0) key1press = 1; //按键1按下， 开始延时消抖
  105   1        if(KEY1 == 0 && key1press == 3)                 //10-20毫秒延时，key1press由定时器中断自增，时间在10-20毫秒之间
  106   1        {
  107   2          key1nums++;                                   //按键1次数
  108   2          if(key1nums > 99) key1nums = 0;               //防溢出，大于99清零按键次数
  109   2          if((key1nums & 0x01) == 0x01) timing = START; //奇数次按键，启动秒表
  110   2          if((key1nums & 0x01) == 0x00) timing = STOP;  //偶数次按键，暂停秒表
  111   2        }
  112   1        if(KEY1 == 1) key1press = 0;                    //按键1松开后，清零key1press
  113   1      
  114   1      //------------------KEY2------------------------- //按键2：清零
  115   1        if(KEY2 == 0 && key2press == 0) key2press = 1;  //按键2按下， 开始延时消抖
  116   1        if(KEY2 == 0 && key2press == 3)                 //10-20毫秒延时，key1press由定时器中断自增，时间在10-20毫秒之间
  117   1        {
  118   2          if(timing == STOP)  timing = CLEAR;           //只有秒表暂停状态，才能清零
  119   2        }
  120   1        if(KEY2 == 1) key2press = 0;                    //按键2松开后，清零key2press
  121   1      }


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.57.0,  main                                                               21/02/23  22:34:53  PAGE 3   

  code size            =       538     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         7     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
